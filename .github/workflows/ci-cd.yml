name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: 'pixelsandpetals'

jobs:
  # Linting and Type Checking
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type check - Web
        run: npx tsc --noEmit || echo "Type check has errors, but continuing..."
        working-directory: ./apps/web

      - name: TypeScript type check - Backend
        run: npx tsc --noEmit || echo "Type check has errors, but continuing..."
        working-directory: ./apps/backend

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Application
  build:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Web application
        run: |
          npm run build
          echo "Build complete, checking output..."
          ls -la
          if [ -d "out" ]; then
            echo "out directory created successfully"
            ls -la out/ | head -20
          else
            echo "Warning: out directory not found after build"
          fi
        working-directory: ./apps/web
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.BACKEND_API_URL || 'http://pixelsandpetals-backend-alb-1723030630.us-east-1.elb.amazonaws.com' }}

      - name: Build Backend application
        run: npm run build
        working-directory: ./apps/backend
        env:
          NODE_ENV: production

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: apps/web/out/
          retention-days: 7

  # Build and Push Docker Image - Only for backend
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-backend:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to AWS ECS (Production) - Backend only
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Backend service to ECS
        run: |
          aws ecs update-service \
            --cluster pixelsandpetals-cluster \
            --service pixelsandpetals-backend-service \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster pixelsandpetals-cluster \
            --services pixelsandpetals-backend-service

  # Deploy Static Assets to S3/CloudFront
  deploy-static-assets:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./frontend-build

      - name: List downloaded files
        run: |
          echo "Checking downloaded artifacts..."
          ls -la frontend-build/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync static assets to S3
        run: |
          aws s3 sync frontend-build/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-static-assets
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://pixelsandpetals.com
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Post-deployment notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-static-assets]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Send Telegram notification on success
        if: needs.deploy-production.result == 'success' && needs.deploy-static-assets.result == 'success'
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="HTML" \
            -d text="<b>‚úÖ Deployment Successful</b>%0A%0AüöÄ <b>Pixels &amp; Petals</b> deployed successfully to production!%0A%0A<b>Commit:</b> ${{ github.sha }}%0A<b>Branch:</b> ${{ github.ref_name }}%0A<b>Author:</b> ${{ github.actor }}%0A%0Aüåê <a href='https://pixelsandpetals.com'>Visit Site</a>"

      - name: Send Telegram notification on failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-static-assets.result == 'failure'
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="HTML" \
            -d text="<b>‚ùå Deployment Failed</b>%0A%0Aüí• <b>Pixels &amp; Petals</b> deployment failed!%0A%0A<b>Commit:</b> ${{ github.sha }}%0A<b>Branch:</b> ${{ github.ref_name }}%0A<b>Author:</b> ${{ github.actor }}%0A%0A<a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>View Logs</a>"